#include <stdio.h>#include <iostream>#include <stdlib.h>
#include <cmath>
#include <fstream>
#include <math.h>using namespace std;
#define PI 3.14159265
#define COS(x) cos(x)
#define SIN(x) sin(x)

unsigned char Skeleton[40][9] ={{255,255,0,255,0,0,0,0,0},{255,0,0,255,0,255,0,0,0},{255,0,0,0,0,255,0,255,0},{255,255,0,0,0,0,0,255,0},{255,255,255,0,0,0,0,0,255},{255,0,255,255,255,0,0,0,0},{255,0,0,0,255,255,255,0,0},{255,0,0,0,0,0,255,255,255},{255,255,255,255,255,0,0,0,0},{255,255,255,255,0,0,0,0,255},{255,0,255,255,255,255,0,0,0},{255,0,0,255,255,255,255,0,0},{255,0,0,0,255,255,255,255,0},{255,0,0,0,0,255,255,255,255},{255,255,0,0,0,0,255,255,255},{255,255,255,0,0,0,0,255,255},{255,255,255,255,255,0,0,0,255},{255,0,255,255,255,255,255,0,0},{255,0,0,0,255,255,255,255,255},{255,255,255,0,0,0,255,255,255},{255,255,255,255,0,0,0,255,255},{255,255,255,255,255,255,0,0,0},{255,0,0,255,255,255,255,255,0},{255,255,0,0,0,255,255,255,255},{255,255,255,255,255,0,0,255,255},{255,255,255,255,0,0,255,255,255},{255,255,255,255,255,255,255,0,0},{255,255,255,255,255,255,0,0,255},{255,0,255,255,255,255,255,255,0},{255,0,0,255,255,255,255,255,255},{255,255,0,0,255,255,255,255,255},{255,255,255,0,0,255,255,255,255},{255,255,255,255,255,0,255,255,255},{255,255,255,255,255,255,255,0,255},{255,0,255,255,255,255,255,255,255},{255,255,255,0,255,255,255,255,255},{255,255,255,255,255,255,0,255,255},{255,255,255,255,255,255,255,255,0},{255,255,0,255,255,255,255,255,255},{255,255,255,255,0,255,255,255,255}};
//unsigned char Pattern[88][9] = {{1,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,1,0,0},{1,0,1,0,0,0,0,0,0},{1,0,0,0,1,0,0,0,0},{1,0,0,0,0,0,0,1,0},{1,1,0,0,0,0,0,0,0},{1,0,0,0,0,1,0,0,0},{1,0,0,1,0,0,0,0,0},{1,1,0,1,0,0,0,0,0},{1,0,0,1,0,1,0,0,0},{1,1,0,0,0,0,0,1,0},{1,0,0,0,0,1,0,1,0},{1,0,0,1,1,1,0,0,0},{1,1,1,1,1,1,1,1,1},{1,1,0,0,0,0,0,1,1},{1,1,1,1,1,1,1,1,1},{1,1,0,1,0,1,0,0,0},{1,1,1,1,1,1,1,1,1},{1,0,0,1,0,1,0,1,0},{1,1,1,1,1,1,1,1,1},{1,1,0,0,0,1,0,1,0},{1,1,1,1,1,1,1,1,1},{1,1,0,1,0,0,0,1,0},{1,1,1,1,1,1,1,1,1},{1,0,1,0,1,0,0,0,1},{1,1,1,1,1,1,0,0,1},{1,0,1,0,1,0,0,1,0},{1,1,1,1,1,1,0,1,0},{1,0,1,0,1,0,0,1,1},{1,1,1,1,1,1,0,1,1},{1,0,1,0,1,0,1,0,0},{1,1,1,1,1,1,1,0,0},{1,0,1,0,1,0,1,0,1},{1,1,1,1,1,1,1,0,1},{1,0,1,0,1,0,1,1,0},{1,1,1,1,1,1,1,1,0},{1,0,1,0,1,0,1,1,1},{1,1,1,1,1,1,1,1,1},{1,0,1,0,1,0,1,0,0},{1,0,1,1,1,1,1,1,0},{1,1,0,0,1,0,1,0,0},{1,1,0,1,1,1,1,1,0},{1,1,1,0,1,0,1,0,0},{1,1,1,1,1,1,1,1,0},{1,0,0,0,1,0,1,0,1},{1,0,0,1,1,1,1,1,1},{1,0,1,0,1,0,1,0,1},{1,0,1,1,1,1,1,1,1},{1,1,0,0,1,0,1,0,1},{1,1,0,1,1,1,1,1,1},{1,1,1,0,1,0,1,0,1},{1,1,1,1,1,1,1,1,1},{1,0,0,0,1,0,1,0,1},{1,1,0,0,1,1,1,1,1},{1,0,0,1,0,0,1,0,1},{1,1,0,1,0,1,1,1,1},{1,0,0,1,1,0,1,0,1},{1,1,0,1,1,1,1,1,1},{1,0,1,0,0,0,1,0,1},{1,1,1,0,0,1,1,1,1},{1,0,1,0,1,0,1,0,1},{1,1,1,0,1,1,1,1,1},{1,0,1,1,0,0,1,0,1},{1,1,1,1,0,1,1,1,1},{1,0,1,1,1,0,1,0,1},{1,1,1,1,1,1,1,1,1},{1,0,1,0,0,0,1,0,1},{1,1,1,1,0,0,1,0,1},{1,0,1,0,0,1,0,0,1},{1,1,1,1,0,1,0,1,1},{1,0,1,0,0,1,1,0,1},{1,1,1,1,0,1,1,0,1},{1,0,1,0,1,0,0,0,1},{1,1,1,1,1,0,0,1,1},{1,0,1,0,1,0,1,0,1},{1,1,1,1,1,0,1,1,1},{1,0,1,0,1,1,0,0,1},{1,1,1,1,1,1,0,1,1},{1,0,1,0,1,1,1,0,1},{1,1,1,1,1,1,1,1,1},{1,1,0,1,0,0,1,0,0},{1,1,0,1,1,0,1,0,1},{1,0,0,1,0,1,0,0,1},{1,0,1,1,0,1,1,0,1},{1,0,1,0,0,1,0,1,0},{1,0,1,0,1,1,0,1,1},{1,1,0,0,1,0,0,1,0},{1,1,1,0,1,0,1,1,0}};
unsigned char Pattern[444][9] ={{0, 0, 0, 0, 1, 0, 0, 0, 1, },
{0, 0, 0, 0, 1, 0, 1, 0, 0, },
{0, 0, 1, 0, 1, 0, 0, 0, 0, },
{1, 0, 0, 0, 1, 0, 0, 0, 0, },
{0, 0, 0, 0, 1, 0, 0, 1, 0, },
{0, 0, 0, 0, 1, 1, 0, 0, 0, },
{0, 0, 0, 1, 1, 0, 0, 0, 0, },
{0, 1, 0, 0, 1, 0, 0, 0, 0, },
{0, 1, 0, 0, 1, 1, 0, 0, 0, },
{0, 1, 0, 1, 1, 0, 0, 0, 0, },
{0, 0, 0, 0, 1, 1, 0, 1, 0, },
{0, 0, 0, 1, 1, 0, 0, 1, 0, },
{0, 1, 0, 0, 1, 1, 1, 0, 0, },
{0, 1, 0, 1, 1, 0, 0, 0, 1, },
{0, 0, 1, 1, 1, 0, 0, 1, 0, },
{1, 0, 0, 0, 1, 1, 0, 1, 0, },
{1, 1, 0, 1, 1, 0, 0, 0, 0, },
{0, 0, 0, 0, 1, 1, 0, 1, 1, },
{0, 1, 0, 1, 1, 1, 0, 0, 0, },
{0, 1, 0, 1, 1, 0, 0, 1, 0, },
{0, 0, 0, 1, 1, 1, 0, 1, 0, },
{0, 1, 0, 0, 1, 1, 0, 1, 0, },
{1, 1, 0, 1, 1, 0, 0, 0, 1, },
{0, 0, 0, 0, 1, 1, 1, 1, 1, },
{0, 1, 0, 1, 1, 1, 0, 0, 1, },
{0, 1, 0, 1, 1, 0, 0, 1, 1, },
{0, 0, 0, 1, 1, 1, 0, 1, 1, },
{0, 1, 0, 0, 1, 1, 0, 1, 1, },
{1, 1, 0, 1, 1, 0, 0, 1, 0, },
{0, 0, 0, 1, 1, 1, 0, 1, 1, },
{0, 1, 0, 1, 1, 1, 0, 1, 0, },
{0, 1, 0, 1, 1, 0, 1, 1, 0, },
{0, 0, 0, 1, 1, 1, 1, 1, 0, },
{0, 1, 0, 0, 1, 1, 1, 1, 0, },
{1, 1, 0, 1, 1, 0, 0, 1, 1, },
{0, 0, 0, 1, 1, 1, 1, 1, 1, },
{0, 1, 0, 1, 1, 1, 0, 1, 1, },
{0, 1, 0, 1, 1, 0, 1, 1, 1, },
{0, 0, 0, 1, 1, 1, 1, 1, 1, },
{0, 1, 0, 0, 1, 1, 1, 1, 1, },
{1, 1, 0, 1, 1, 0, 1, 0, 0, },
{0, 0, 1, 0, 1, 1, 0, 1, 1, },
{0, 1, 0, 1, 1, 1, 1, 0, 0, },
{0, 1, 0, 1, 1, 1, 0, 1, 0, },
{0, 0, 1, 1, 1, 1, 0, 1, 0, },
{0, 1, 0, 1, 1, 1, 0, 1, 0, },
{1, 1, 0, 1, 1, 0, 1, 0, 1, },
{0, 0, 1, 0, 1, 1, 1, 1, 1, },
{0, 1, 0, 1, 1, 1, 1, 0, 1, },
{0, 1, 0, 1, 1, 1, 0, 1, 1, },
{0, 0, 1, 1, 1, 1, 0, 1, 1, },
{0, 1, 0, 1, 1, 1, 0, 1, 1, },
{1, 1, 0, 1, 1, 0, 1, 1, 0, },
{0, 0, 1, 1, 1, 1, 0, 1, 1, },
{0, 1, 0, 1, 1, 1, 1, 1, 0, },
{0, 1, 0, 1, 1, 1, 1, 1, 0, },
{0, 0, 1, 1, 1, 1, 1, 1, 0, },
{0, 1, 0, 1, 1, 1, 1, 1, 0, },
{1, 1, 0, 1, 1, 0, 1, 1, 1, },
{0, 0, 1, 1, 1, 1, 1, 1, 1, },
{0, 1, 0, 1, 1, 1, 1, 1, 1, },
{0, 1, 0, 1, 1, 1, 1, 1, 1, },
{0, 0, 1, 1, 1, 1, 1, 1, 1, },
{0, 1, 0, 1, 1, 1, 1, 1, 1, },
{0, 1, 0, 0, 1, 1, 1, 0, 1, },
{0, 1, 0, 1, 1, 0, 1, 0, 1, },
{0, 0, 1, 1, 1, 0, 0, 1, 1, },
{1, 0, 0, 0, 1, 1, 1, 1, 0, },
{1, 1, 0, 1, 1, 1, 0, 0, 0, },
{0, 1, 0, 0, 1, 1, 0, 1, 1, },
{0, 1, 1, 1, 1, 1, 0, 0, 0, },
{0, 1, 1, 1, 1, 0, 0, 1, 0, },
{0, 1, 0, 1, 1, 1, 0, 1, 0, },
{0, 1, 1, 0, 1, 1, 0, 1, 0, },
{1, 1, 0, 1, 1, 1, 0, 0, 1, },
{0, 1, 0, 0, 1, 1, 1, 1, 1, },
{0, 1, 1, 1, 1, 1, 0, 0, 1, },
{0, 1, 1, 1, 1, 0, 0, 1, 1, },
{0, 1, 0, 1, 1, 1, 0, 1, 1, },
{0, 1, 1, 0, 1, 1, 0, 1, 1, },
{1, 1, 0, 1, 1, 1, 0, 1, 0, },
{0, 1, 0, 1, 1, 1, 0, 1, 1, },
{0, 1, 1, 1, 1, 1, 0, 1, 0, },
{0, 1, 1, 1, 1, 0, 1, 1, 0, },
{0, 1, 0, 1, 1, 1, 1, 1, 0, },
{0, 1, 1, 0, 1, 1, 1, 1, 0, },
{1, 1, 0, 1, 1, 1, 0, 1, 1, },
{0, 1, 0, 1, 1, 1, 1, 1, 1, },
{0, 1, 1, 1, 1, 1, 0, 1, 1, },
{0, 1, 1, 1, 1, 0, 1, 1, 1, },
{0, 1, 0, 1, 1, 1, 1, 1, 1, },
{0, 1, 1, 0, 1, 1, 1, 1, 1, },
{1, 1, 0, 1, 1, 1, 1, 0, 0, },
{0, 1, 1, 0, 1, 1, 0, 1, 1, },
{0, 1, 1, 1, 1, 1, 1, 0, 0, },
{0, 1, 1, 1, 1, 1, 0, 1, 0, },
{0, 1, 1, 1, 1, 1, 0, 1, 0, },
{0, 1, 1, 1, 1, 1, 0, 1, 0, },
{1, 1, 0, 1, 1, 1, 1, 0, 1, },
{0, 1, 1, 0, 1, 1, 1, 1, 1, },
{0, 1, 1, 1, 1, 1, 1, 0, 1, },
{0, 1, 1, 1, 1, 1, 0, 1, 1, },
{0, 1, 1, 1, 1, 1, 0, 1, 1, },
{0, 1, 1, 1, 1, 1, 0, 1, 1, },
{1, 1, 0, 1, 1, 1, 1, 1, 0, },
{0, 1, 1, 1, 1, 1, 0, 1, 1, },
{0, 1, 1, 1, 1, 1, 1, 1, 0, },
{0, 1, 1, 1, 1, 1, 1, 1, 0, },
{0, 1, 1, 1, 1, 1, 1, 1, 0, },
{0, 1, 1, 1, 1, 1, 1, 1, 0, },
{1, 1, 0, 1, 1, 1, 1, 1, 1, },
{0, 1, 1, 1, 1, 1, 1, 1, 1, },
{0, 1, 1, 1, 1, 1, 1, 1, 1, },
{0, 1, 1, 1, 1, 1, 1, 1, 1, },
{0, 1, 1, 1, 1, 1, 1, 1, 1, },
{0, 1, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 0, 0, 1, 1, 1, 0, 0, },
{0, 1, 1, 1, 1, 0, 0, 0, 1, },
{1, 0, 1, 1, 1, 0, 0, 1, 0, },
{1, 0, 1, 0, 1, 1, 0, 1, 0, },
{1, 1, 1, 1, 1, 0, 0, 0, 0, },
{1, 0, 0, 0, 1, 1, 0, 1, 1, },
{1, 1, 0, 1, 1, 1, 0, 0, 0, },
{1, 1, 0, 1, 1, 0, 0, 1, 0, },
{1, 0, 0, 1, 1, 1, 0, 1, 0, },
{1, 1, 0, 0, 1, 1, 0, 1, 0, },
{1, 1, 1, 1, 1, 0, 0, 0, 1, },
{1, 0, 0, 0, 1, 1, 1, 1, 1, },
{1, 1, 0, 1, 1, 1, 0, 0, 1, },
{1, 1, 0, 1, 1, 0, 0, 1, 1, },
{1, 0, 0, 1, 1, 1, 0, 1, 1, },
{1, 1, 0, 0, 1, 1, 0, 1, 1, },
{1, 1, 1, 1, 1, 0, 0, 1, 0, },
{1, 0, 0, 1, 1, 1, 0, 1, 1, },
{1, 1, 0, 1, 1, 1, 0, 1, 0, },
{1, 1, 0, 1, 1, 0, 1, 1, 0, },
{1, 0, 0, 1, 1, 1, 1, 1, 0, },
{1, 1, 0, 0, 1, 1, 1, 1, 0, },
{1, 1, 1, 1, 1, 0, 0, 1, 1, },
{1, 0, 0, 1, 1, 1, 1, 1, 1, },
{1, 1, 0, 1, 1, 1, 0, 1, 1, },
{1, 1, 0, 1, 1, 0, 1, 1, 1, },
{1, 0, 0, 1, 1, 1, 1, 1, 1, },
{1, 1, 0, 0, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 0, 1, 0, 0, },
{1, 0, 1, 0, 1, 1, 0, 1, 1, },
{1, 1, 0, 1, 1, 1, 1, 0, 0, },
{1, 1, 0, 1, 1, 1, 0, 1, 0, },
{1, 0, 1, 1, 1, 1, 0, 1, 0, },
{1, 1, 0, 1, 1, 1, 0, 1, 0, },
{1, 1, 1, 1, 1, 0, 1, 0, 1, },
{1, 0, 1, 0, 1, 1, 1, 1, 1, },
{1, 1, 0, 1, 1, 1, 1, 0, 1, },
{1, 1, 0, 1, 1, 1, 0, 1, 1, },
{1, 0, 1, 1, 1, 1, 0, 1, 1, },
{1, 1, 0, 1, 1, 1, 0, 1, 1, },
{1, 1, 1, 1, 1, 0, 1, 1, 0, },
{1, 0, 1, 1, 1, 1, 0, 1, 1, },
{1, 1, 0, 1, 1, 1, 1, 1, 0, },
{1, 1, 0, 1, 1, 1, 1, 1, 0, },
{1, 0, 1, 1, 1, 1, 1, 1, 0, },
{1, 1, 0, 1, 1, 1, 1, 1, 0, },
{1, 1, 1, 1, 1, 0, 1, 1, 1, },
{1, 0, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 0, 1, 1, 1, 1, 1, 1, },
{1, 1, 0, 1, 1, 1, 1, 1, 1, },
{1, 0, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 0, 1, 1, 1, 1, 1, 1, },
{1, 1, 0, 0, 1, 1, 1, 0, 1, },
{0, 1, 1, 1, 1, 0, 1, 0, 1, },
{1, 0, 1, 1, 1, 0, 0, 1, 1, },
{1, 0, 1, 0, 1, 1, 1, 1, 0, },
{1, 1, 1, 1, 1, 1, 0, 0, 0, },
{1, 1, 0, 0, 1, 1, 0, 1, 1, },
{1, 1, 1, 1, 1, 1, 0, 0, 0, },
{1, 1, 1, 1, 1, 0, 0, 1, 0, },
{1, 1, 0, 1, 1, 1, 0, 1, 0, },
{1, 1, 1, 0, 1, 1, 0, 1, 0, },
{1, 1, 1, 1, 1, 1, 0, 0, 1, },
{1, 1, 0, 0, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 1, 0, 0, 1, },
{1, 1, 1, 1, 1, 0, 0, 1, 1, },
{1, 1, 0, 1, 1, 1, 0, 1, 1, },
{1, 1, 1, 0, 1, 1, 0, 1, 1, },
{1, 1, 1, 1, 1, 1, 0, 1, 0, },
{1, 1, 0, 1, 1, 1, 0, 1, 1, },
{1, 1, 1, 1, 1, 1, 0, 1, 0, },
{1, 1, 1, 1, 1, 0, 1, 1, 0, },
{1, 1, 0, 1, 1, 1, 1, 1, 0, },
{1, 1, 1, 0, 1, 1, 1, 1, 0, },
{1, 1, 1, 1, 1, 1, 0, 1, 1, },
{1, 1, 0, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 1, 0, 1, 1, },
{1, 1, 1, 1, 1, 0, 1, 1, 1, },
{1, 1, 0, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 0, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 0, 0, },
{1, 1, 1, 0, 1, 1, 0, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 0, 0, },
{1, 1, 1, 1, 1, 1, 0, 1, 0, },
{1, 1, 1, 1, 1, 1, 0, 1, 0, },
{1, 1, 1, 1, 1, 1, 0, 1, 0, },
{1, 1, 1, 1, 1, 1, 1, 0, 1, },
{1, 1, 1, 0, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 0, 1, },
{1, 1, 1, 1, 1, 1, 0, 1, 1, },
{1, 1, 1, 1, 1, 1, 0, 1, 1, },
{1, 1, 1, 1, 1, 1, 0, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 1, 0, },
{1, 1, 1, 1, 1, 1, 0, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 1, 0, },
{1, 1, 1, 1, 1, 1, 1, 1, 0, },
{1, 1, 1, 1, 1, 1, 1, 1, 0, },
{1, 1, 1, 1, 1, 1, 1, 1, 0, },
{1, 1, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 1, 1, },
{1, 0, 1, 0, 1, 0, 0, 0, 1, },
{1, 0, 1, 0, 1, 0, 1, 0, 0, },
{1, 0, 0, 0, 1, 0, 1, 0, 1, },
{0, 0, 1, 0, 1, 0, 1, 0, 1, },
{1, 0, 1, 0, 1, 1, 0, 0, 1, },
{1, 0, 1, 0, 1, 0, 1, 1, 0, },
{1, 0, 0, 0, 1, 0, 1, 1, 1, },
{0, 0, 1, 0, 1, 0, 1, 1, 1, },
{1, 0, 1, 1, 1, 0, 0, 0, 1, },
{1, 0, 1, 1, 1, 0, 1, 0, 0, },
{1, 0, 0, 0, 1, 1, 1, 0, 1, },
{0, 0, 1, 0, 1, 1, 1, 0, 1, },
{1, 0, 1, 1, 1, 1, 0, 0, 1, },
{1, 0, 1, 1, 1, 0, 1, 1, 0, },
{1, 0, 0, 0, 1, 1, 1, 1, 1, },
{0, 0, 1, 0, 1, 1, 1, 1, 1, },
{1, 1, 1, 0, 1, 0, 0, 0, 1, },
{1, 1, 1, 0, 1, 0, 1, 0, 0, },
{1, 0, 0, 1, 1, 0, 1, 0, 1, },
{0, 1, 1, 0, 1, 0, 1, 0, 1, },
{1, 1, 1, 0, 1, 1, 0, 0, 1, },
{1, 1, 1, 0, 1, 0, 1, 1, 0, },
{1, 0, 0, 1, 1, 0, 1, 1, 1, },
{0, 1, 1, 0, 1, 0, 1, 1, 1, },
{1, 1, 1, 1, 1, 0, 0, 0, 1, },
{1, 1, 1, 1, 1, 0, 1, 0, 0, },
{1, 0, 0, 1, 1, 1, 1, 0, 1, },
{0, 1, 1, 0, 1, 1, 1, 0, 1, },
{1, 1, 1, 1, 1, 1, 0, 0, 1, },
{1, 1, 1, 1, 1, 0, 1, 1, 0, },
{1, 0, 0, 1, 1, 1, 1, 1, 1, },
{0, 1, 1, 0, 1, 1, 1, 1, 1, },
{1, 0, 1, 0, 1, 0, 0, 1, 0, },
{1, 0, 0, 0, 1, 1, 1, 0, 0, },
{0, 1, 0, 0, 1, 0, 1, 0, 1, },
{0, 0, 1, 1, 1, 0, 0, 0, 1, },
{1, 0, 1, 0, 1, 1, 0, 1, 0, },
{1, 0, 0, 0, 1, 1, 1, 1, 0, },
{0, 1, 0, 0, 1, 0, 1, 1, 1, },
{0, 0, 1, 1, 1, 0, 0, 1, 1, },
{1, 0, 1, 1, 1, 0, 0, 1, 0, },
{1, 0, 0, 1, 1, 1, 1, 0, 0, },
{0, 1, 0, 0, 1, 1, 1, 0, 1, },
{0, 0, 1, 1, 1, 1, 0, 0, 1, },
{1, 0, 1, 1, 1, 1, 0, 1, 0, },
{1, 0, 0, 1, 1, 1, 1, 1, 0, },
{0, 1, 0, 0, 1, 1, 1, 1, 1, },
{0, 0, 1, 1, 1, 1, 0, 1, 1, },
{1, 1, 1, 0, 1, 0, 0, 1, 0, },
{1, 1, 0, 0, 1, 1, 1, 0, 0, },
{0, 1, 0, 1, 1, 0, 1, 0, 1, },
{0, 1, 1, 1, 1, 0, 0, 0, 1, },
{1, 1, 1, 0, 1, 1, 0, 1, 0, },
{1, 1, 0, 0, 1, 1, 1, 1, 0, },
{0, 1, 0, 1, 1, 0, 1, 1, 1, },
{0, 1, 1, 1, 1, 0, 0, 1, 1, },
{1, 1, 1, 1, 1, 0, 0, 1, 0, },
{1, 1, 0, 1, 1, 1, 1, 0, 0, },
{0, 1, 0, 1, 1, 1, 1, 0, 1, },
{0, 1, 1, 1, 1, 1, 0, 0, 1, },
{1, 1, 1, 1, 1, 1, 0, 1, 0, },
{1, 1, 0, 1, 1, 1, 1, 1, 0, },
{0, 1, 0, 1, 1, 1, 1, 1, 1, },
{0, 1, 1, 1, 1, 1, 0, 1, 1, },
{1, 0, 1, 0, 1, 0, 0, 1, 1, },
{1, 0, 1, 0, 1, 1, 1, 0, 0, },
{1, 1, 0, 0, 1, 0, 1, 0, 1, },
{0, 0, 1, 1, 1, 0, 1, 0, 1, },
{1, 0, 1, 0, 1, 1, 0, 1, 1, },
{1, 0, 1, 0, 1, 1, 1, 1, 0, },
{1, 1, 0, 0, 1, 0, 1, 1, 1, },
{0, 0, 1, 1, 1, 0, 1, 1, 1, },
{1, 0, 1, 1, 1, 0, 0, 1, 1, },
{1, 0, 1, 1, 1, 1, 1, 0, 0, },
{1, 1, 0, 0, 1, 1, 1, 0, 1, },
{0, 0, 1, 1, 1, 1, 1, 0, 1, },
{1, 0, 1, 1, 1, 1, 0, 1, 1, },
{1, 0, 1, 1, 1, 1, 1, 1, 0, },
{1, 1, 0, 0, 1, 1, 1, 1, 1, },
{0, 0, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 0, 1, 0, 0, 1, 1, },
{1, 1, 1, 0, 1, 1, 1, 0, 0, },
{1, 1, 0, 1, 1, 0, 1, 0, 1, },
{0, 1, 1, 1, 1, 0, 1, 0, 1, },
{1, 1, 1, 0, 1, 1, 0, 1, 1, },
{1, 1, 1, 0, 1, 1, 1, 1, 0, },
{1, 1, 0, 1, 1, 0, 1, 1, 1, },
{0, 1, 1, 1, 1, 0, 1, 1, 1, },
{1, 1, 1, 1, 1, 0, 0, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 0, 0, },
{1, 1, 0, 1, 1, 1, 1, 0, 1, },
{0, 1, 1, 1, 1, 1, 1, 0, 1, },
{1, 1, 1, 1, 1, 1, 0, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 1, 0, },
{1, 1, 0, 1, 1, 1, 1, 1, 1, },
{0, 1, 1, 1, 1, 1, 1, 1, 1, },
{1, 0, 1, 0, 1, 0, 1, 0, 0, },
{1, 0, 0, 0, 1, 0, 1, 0, 1, },
{0, 0, 1, 0, 1, 0, 1, 0, 1, },
{1, 0, 1, 0, 1, 0, 0, 0, 1, },
{1, 0, 1, 0, 1, 1, 1, 0, 0, },
{1, 0, 0, 0, 1, 0, 1, 1, 1, },
{0, 0, 1, 0, 1, 0, 1, 1, 1, },
{1, 0, 1, 0, 1, 0, 0, 1, 1, },
{1, 0, 1, 1, 1, 0, 1, 0, 0, },
{1, 0, 0, 1, 1, 0, 1, 0, 1, },
{0, 0, 1, 0, 1, 1, 1, 0, 1, },
{1, 0, 1, 0, 1, 1, 0, 0, 1, },
{1, 0, 1, 1, 1, 1, 1, 0, 0, },
{1, 0, 0, 1, 1, 0, 1, 1, 1, },
{0, 0, 1, 0, 1, 1, 1, 1, 1, },
{1, 0, 1, 0, 1, 1, 0, 1, 1, },
{1, 1, 1, 0, 1, 0, 1, 0, 0, },
{1, 1, 0, 0, 1, 0, 1, 0, 1, },
{0, 0, 1, 1, 1, 0, 1, 0, 1, },
{1, 1, 1, 0, 1, 0, 0, 0, 1, },
{1, 1, 1, 0, 1, 1, 1, 0, 0, },
{1, 1, 0, 0, 1, 0, 1, 1, 1, },
{0, 0, 1, 1, 1, 0, 1, 1, 1, },
{1, 1, 1, 0, 1, 0, 0, 1, 1, },
{1, 1, 1, 1, 1, 0, 1, 0, 0, },
{1, 1, 0, 1, 1, 0, 1, 0, 1, },
{0, 0, 1, 1, 1, 1, 1, 0, 1, },
{1, 1, 1, 0, 1, 1, 0, 0, 1, },
{1, 1, 1, 1, 1, 1, 1, 0, 0, },
{1, 1, 0, 1, 1, 0, 1, 1, 1, },
{0, 0, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 0, 1, 1, 0, 1, 1, },
{1, 0, 1, 0, 1, 0, 1, 0, 1, },
{1, 0, 1, 0, 1, 0, 1, 0, 1, },
{1, 0, 1, 0, 1, 0, 1, 0, 1, },
{1, 0, 1, 0, 1, 0, 1, 0, 1, },
{1, 0, 1, 0, 1, 1, 1, 0, 1, },
{1, 0, 1, 0, 1, 0, 1, 1, 1, },
{1, 0, 1, 0, 1, 0, 1, 1, 1, },
{1, 0, 1, 0, 1, 0, 1, 1, 1, },
{1, 0, 1, 1, 1, 0, 1, 0, 1, },
{1, 0, 1, 1, 1, 0, 1, 0, 1, },
{1, 0, 1, 0, 1, 1, 1, 0, 1, },
{1, 0, 1, 0, 1, 1, 1, 0, 1, },
{1, 0, 1, 1, 1, 1, 1, 0, 1, },
{1, 0, 1, 1, 1, 0, 1, 1, 1, },
{1, 0, 1, 0, 1, 1, 1, 1, 1, },
{1, 0, 1, 0, 1, 1, 1, 1, 1, },
{1, 1, 1, 0, 1, 0, 1, 0, 1, },
{1, 1, 1, 0, 1, 0, 1, 0, 1, },
{1, 0, 1, 1, 1, 0, 1, 0, 1, },
{1, 1, 1, 0, 1, 0, 1, 0, 1, },
{1, 1, 1, 0, 1, 1, 1, 0, 1, },
{1, 1, 1, 0, 1, 0, 1, 1, 1, },
{1, 0, 1, 1, 1, 0, 1, 1, 1, },
{1, 1, 1, 0, 1, 0, 1, 1, 1, },
{1, 1, 1, 1, 1, 0, 1, 0, 1, },
{1, 1, 1, 1, 1, 0, 1, 0, 1, },
{1, 0, 1, 1, 1, 1, 1, 0, 1, },
{1, 1, 1, 0, 1, 1, 1, 0, 1, },
{1, 1, 1, 1, 1, 1, 1, 0, 1, },
{1, 1, 1, 1, 1, 0, 1, 1, 1, },
{1, 0, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 0, 1, 1, 1, 1, 1, },
{1, 0, 1, 0, 1, 0, 1, 1, 0, },
{1, 0, 0, 0, 1, 1, 1, 0, 1, },
{0, 1, 1, 0, 1, 0, 1, 0, 1, },
{1, 0, 1, 1, 1, 0, 0, 0, 1, },
{1, 0, 1, 0, 1, 1, 1, 1, 0, },
{1, 0, 0, 0, 1, 1, 1, 1, 1, },
{0, 1, 1, 0, 1, 0, 1, 1, 1, },
{1, 0, 1, 1, 1, 0, 0, 1, 1, },
{1, 0, 1, 1, 1, 0, 1, 1, 0, },
{1, 0, 0, 1, 1, 1, 1, 0, 1, },
{0, 1, 1, 0, 1, 1, 1, 0, 1, },
{1, 0, 1, 1, 1, 1, 0, 0, 1, },
{1, 0, 1, 1, 1, 1, 1, 1, 0, },
{1, 0, 0, 1, 1, 1, 1, 1, 1, },
{0, 1, 1, 0, 1, 1, 1, 1, 1, },
{1, 0, 1, 1, 1, 1, 0, 1, 1, },
{1, 1, 1, 0, 1, 0, 1, 1, 0, },
{1, 1, 0, 0, 1, 1, 1, 0, 1, },
{0, 1, 1, 1, 1, 0, 1, 0, 1, },
{1, 1, 1, 1, 1, 0, 0, 0, 1, },
{1, 1, 1, 0, 1, 1, 1, 1, 0, },
{1, 1, 0, 0, 1, 1, 1, 1, 1, },
{0, 1, 1, 1, 1, 0, 1, 1, 1, },
{1, 1, 1, 1, 1, 0, 0, 1, 1, },
{1, 1, 1, 1, 1, 0, 1, 1, 0, },
{1, 1, 0, 1, 1, 1, 1, 0, 1, },
{0, 1, 1, 1, 1, 1, 1, 0, 1, },
{1, 1, 1, 1, 1, 1, 0, 0, 1, },
{1, 1, 1, 1, 1, 1, 1, 1, 0, },
{1, 1, 0, 1, 1, 1, 1, 1, 1, },
{0, 1, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 1, 0, 1, 1, },
{1, 0, 1, 0, 1, 0, 1, 1, 1, },
{1, 0, 1, 0, 1, 1, 1, 0, 1, },
{1, 1, 1, 0, 1, 0, 1, 0, 1, },
{1, 0, 1, 1, 1, 0, 1, 0, 1, },
{1, 0, 1, 0, 1, 1, 1, 1, 1, },
{1, 0, 1, 0, 1, 1, 1, 1, 1, },
{1, 1, 1, 0, 1, 0, 1, 1, 1, },
{1, 0, 1, 1, 1, 0, 1, 1, 1, },
{1, 0, 1, 1, 1, 0, 1, 1, 1, },
{1, 0, 1, 1, 1, 1, 1, 0, 1, },
{1, 1, 1, 0, 1, 1, 1, 0, 1, },
{1, 0, 1, 1, 1, 1, 1, 0, 1, },
{1, 0, 1, 1, 1, 1, 1, 1, 1, },
{1, 0, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 0, 1, 1, 1, 1, 1, },
{1, 0, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 0, 1, 0, 1, 1, 1, },
{1, 1, 1, 0, 1, 1, 1, 0, 1, },
{1, 1, 1, 1, 1, 0, 1, 0, 1, },
{1, 1, 1, 1, 1, 0, 1, 0, 1, },
{1, 1, 1, 0, 1, 1, 1, 1, 1, },
{1, 1, 1, 0, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 0, 1, 1, 1, },
{1, 1, 1, 1, 1, 0, 1, 1, 1, },
{1, 1, 1, 1, 1, 0, 1, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 0, 1, },
{1, 1, 1, 1, 1, 1, 1, 0, 1, },
{1, 1, 1, 1, 1, 1, 1, 0, 1, },
{1, 1, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 1, 1, },
{1, 1, 1, 1, 1, 1, 1, 1, 1, }};

unsigned char find_skeleton(unsigned char mask[9]){
    int flag;
    for(int i=0; i<40;++i){
        flag =0;
        for(int j=0; j<9;++j){
            if(mask[j]!= Skeleton[i][j]){
                flag =1;
                break;
            }
        }
        if(flag==0){
            return 1;
        }
    }
    return 0;
}

unsigned char find_pattern(unsigned char mask[9]){
    int flag;
    for(int i=0; i<444;++i){
        flag =0;
        for(int j=0; j<9;++j){
            if(mask[j]!= Pattern[i][j]){
                flag =1;
                break;
            }
        }
        if(flag==0){
            return 1;
        }
    }
    return 0;
}

int get_pq(int i,int j,unsigned char img[377][377][1]){
    int l1 = ((!img[i][j][0])&&(!img[i][j+1][0])&&(img[i-1][j+1][0])&&(!img[i-1][j][0])&&(img[i-1][j-1][0])&&(!img[i][j-1][0])&&(!img[i+1][j-1][0])&&(!img[i+1][j][0])&&(!img[i+1][j+1][0]));
    int l2 = ((!img[i][j][0])&&(!img[i][j+1][0])&&(!img[i-1][j+1][0])&&(!img[i-1][j][0])&&(img[i-1][j-1][0])&&(!img[i][j-1][0])&&(img[i+1][j-1][0])&&(!img[i+1][j][0])&&(!img[i+1][j+1][0]));
    int l3 = ((!img[i][j][0])&&(!img[i][j+1][0])&&(!img[i-1][j+1][0])&&(!img[i-1][j][0])&&(!img[i-1][j-1][0])&&(!img[i][j-1][0])&&(img[i+1][j-1][0])&&(!img[i+1][j][0])&&(img[i+1][j+1][0]));
    int l4 = ((!img[i][j][0])&&(!img[i][j+1][0])&&(img[i-1][j+1][0])&&(!img[i-1][j][0])&&(!img[i-1][j-1][0])&&(!img[i][j-1][0])&&(!img[i+1][j-1][0])&&(!img[i+1][j][0])&&(img[i+1][j+1][0]));
    int p_q = l1 || l2 || l3 || l4;
    return p_q;

}

int get_p1(int i, int j, unsigned char img[377][377][1],int p_q){
    int p1 = ((!img[i-1][j][0])&&(!img[i+1][j][0])&&(img[i-1][j-1][0] || img[i][j-1][0] || img[i+1][j-1][0]) && (img[i][j+1][0] || img[i-1][j+1][0]|| img[i+1][j+1][0]) && (!p_q));
    return p1;

}

int get_p2(int i, int j, unsigned char img[377][377][1],int p_q){
    int p2 = ((!img[i][j+1][0])&&(!img[i][j-1][0])&&(img[i-1][j+1][0] || img[i-1][j][0] || img[i-1][j-1][0]) && (img[i+1][j-1][0] || img[i+1][j][0]|| img[i+1][j+1][0]) && (!p_q));
    return p2;

}

int get_p3(int i, int j, unsigned char img[377][377][1]){
    int p3 = ((!img[i][j+1][0])&&(!img[i+1][j][0])&&img[i+1][j+1][0]&&(img[i-1][j][0] || img[i-1][j-1][0]||img[i][j-1][0]));
    return p3;
}

int get_p4(int i, int j, unsigned char img[377][377][1]){
    int p4 = ((!img[i][j+1][0])&&(!img[i-1][j][0])&&img[i-1][j+1][0]&&(img[i][j-1][0] || img[i+1][j-1][0]||img[i+1][j][0]));
    return p4;
}

int get_p5(int i, int j, unsigned char img[377][377][1]){
    int p5 = ((!img[i-1][j][0])&&(!img[i][j-1][0])&&img[i-1][j-1][0]&&(img[i][j+1][0] || img[i+1][j][0]||img[i+1][j+1][0]));
    return p5;
}

int get_p6(int i, int j, unsigned char img[377][377][1]){
    int p6 = ((!img[i][j-1][0])&&(!img[i+1][j][0])&&img[i+1][j-1][0]&&(img[i][j+1][0] || img[i-1][j+1][0]||img[i-1][j][0]));
    return p6;
}



int main(int argc, char *argv[]){	// Define file pointer and variables	FILE *file;	int BytesPerPixel;	int Size = 400;	// Check for proper syntax	if (argc < 3){		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [Size = 256]" << endl;		return 0;	}	// Check if image is grayscale or color	if (argc < 4){		BytesPerPixel = 1; // default is grey image	}	else {		BytesPerPixel = atoi(argv[3]);		// Check if size is specified		if (argc >= 5){			Size = atoi(argv[4]);		}	}
    int height = 375;
    int width = 375;	// Allocate image data array	unsigned char Imagedata[height][width][BytesPerPixel];
	unsigned char OutputImage[height][width][1];
	unsigned char Reimage[height+2][width+2][1];    unsigned char Map[height][width];
    unsigned char mask[9];
    unsigned char Map_extended[height+2][width+2];
    unsigned char PMap[height][width];
    unsigned char OutputImage_extended[377][377][1];	// Read image (filename specified by first argument) into image data matrix	if (!(file=fopen(argv[1],"rb"))) {		cout << "Cannot open file: " << argv[1] <<endl;		exit(1);	}	fread(OutputImage, sizeof(unsigned char), height*width*BytesPerPixel, file);	fclose(file);

	for(int i=0;i<height;++i){
        for(int j=0; j<width; ++j){
            if(OutputImage[i][j][0] < 128){
                OutputImage[i][j][0] = 0;
            }
            else{
                OutputImage[i][j][0] = 255;
            }
        }
    }


    bool flag=false;
    int x,m,p,g,k,p_q,p1,p2,p3,p4,p5,p6;
    int count=0;
    //while(!flag){
    for(int c=0;c<35;++c){
        count+=1;
        for(int i=0;i<height;++i){
            for(int j=0; j<width; ++j){
                Imagedata[i][j][0] = OutputImage[i][j][0];
            }
        }

        for(int i=0; i<width+2;++i){
            Reimage[0][i][0] = 0;
            Reimage[height+1][i][0] = 0;
        }

        for(int i=0;i<height+2;++i){
            Reimage[i][0][0] = 0;
            Reimage[i][width+1][0] = 0;
        }

        for(int i=0;i<height; ++i){
            for(int j=0; j<width;++j){
                Reimage[i+1][j+1][0] = Imagedata[i][j][0];
            }
        }

        for(int i=1;i<=height;++i){
            for(int j=1;j<=width;++j){
                mask[0] = Reimage[i][j][0];
                mask[1] = Reimage[i][j+1][0];
                mask[2] = Reimage[i-1][j+1][0];
                mask[3] = Reimage[i-1][j][0];
                mask[4] = Reimage[i-1][j-1][0];
                mask[5] = Reimage[i][j-1][0];
                mask[6] = Reimage[i+1][j-1][0];
                mask[7] = Reimage[i+1][j][0];
                mask[8] = Reimage[i+1][j+1][0];
                Map[i-1][j-1] = find_skeleton(mask);
            }
        }

        for(int i=0; i<width+2;++i){
            Map_extended[0][i] = 0;
            Map_extended[height+1][i] = 0;
        }

        for(int i=0;i<height+2;++i){
            Map_extended[i][0] = 0;
            Map_extended[i][width+1] = 0;
        }

        for(int i=0;i<height; ++i){
            for(int j=0; j<width;++j){
                Map_extended[i+1][j+1] = Map[i][j];
            }
        }

        for(int i=1;i<=height;++i){
            for(int j=1;j<=width;++j){
                mask[0] = Map_extended[i-1][j-1];
                mask[1] = Map_extended[i-1][j];
                mask[2] = Map_extended[i-1][j+1];
                mask[3] = Map_extended[i][j-1];
                mask[4] = Map_extended[i][j];
                mask[5] = Map_extended[i][j+1];
                mask[6] = Map_extended[i+1][j-1];
                mask[7] = Map_extended[i+1][j];
                mask[8] = Map_extended[i+1][j+1];
                PMap[i-1][j-1] = find_pattern(mask);
            }
        }

        for(int i=0; i< height; ++i){
            for(int j=0; j<width; ++j){
                if(Imagedata[i][j][0] == 255){
                    x=1;
                }
                else{
                    x=0;
                }
                m = Map[i][j];
                p = PMap[i][j];
                g = x && ((!m) || p);
                OutputImage[i][j][0] = (unsigned char) (g*255);
                //if(g==1){
                  //  OutputImage[i][j][0] = 255;
                //}
                //else{
                  //  OutputImage[i][j][0] = 0;
                //}
            }
        }
        k=0;
        for(int i=0;i<height;++i){
            for(int j=0;j<width; ++j){
                if(OutputImage[i][j][0]!=Imagedata[i][j][0]){
                    k=1;
                    break;
                }
            }
            if(k==1){
                break;
            }
        }
        if (k==0){
            flag=true;
        }
    }
    for(int i=0; i<width+2;++i){
        OutputImage_extended[0][i][0] = 0;
        OutputImage_extended[height+1][i][0] = 0;
    }

    for(int i=0;i<height+2;++i){
        OutputImage_extended[i][0][0] = 0;
        OutputImage_extended[i][width+1][0] = 0;
    }

    for(int i=0;i<height; ++i){
        for(int j=0; j<width;++j){
            OutputImage_extended[i+1][j+1][0] = OutputImage[i][j][0];
        }
    }
    for(int i=0; i<height+1; ++i){
        for(int j=0; j<width+1;++j){
            if(OutputImage_extended[i][j][0]==255){
                OutputImage_extended[i][j][0] = 1;
            }
        }
    }

    for(int i=1;i<height+1;++i){
        for(int j=1; j<width+1; ++j){
            p_q = get_pq(i,j,OutputImage_extended);
            p1 = get_p1(i,j,OutputImage_extended,p_q);
            p2 = get_p2(i,j,OutputImage_extended,p_q);
            p3 = get_p3(i,j,OutputImage_extended);
            p4 = get_p4(i,j,OutputImage_extended);
            p5 = get_p5(i,j,OutputImage_extended);
            p6 = get_p6(i,j,OutputImage_extended);
            g = (OutputImage_extended[i][j][0] || p1|| p2|| p3|| p4|| p5|| p6);
            OutputImage[i-1][j-1][0] = (unsigned char) (g*255);
        }
    }


	if (!(file=fopen(argv[2],"wb"))) {		cout << "Cannot open file: " << argv[2] <<endl;		exit(1);	}	fwrite(OutputImage, sizeof(unsigned char), height*width*BytesPerPixel, file);	fclose(file);

	cout<<"written"<<endl;

    cout<<count<<endl;
	return 0;
}
